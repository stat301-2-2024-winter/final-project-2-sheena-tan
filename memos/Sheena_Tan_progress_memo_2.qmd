---
title: "Progress Memo 2"
subtitle: |
  | Spotify Sequential Skip Prediction
  | Data Science 2 with R (STAT 301-2) Final Project
author: "Sheena Tan"
date: today

format:
  html:
    toc: true
    embed-resources: true
    
execute:
  echo: false
  warning: false

from: markdown+emoji 
reference-location: margin
citation-location: margin
---

::: {.callout-tip icon=false}

## Github Repo Link

[https://github.com/stat301-2-2024-winter/final-project-2-sheena-tan](https://github.com/stat301-2-2024-winter/final-project-2-sheena-tan)

:::

## Introduction

Spotify, an online music streaming platform with over 190 million active users and over 40 million tracks, faces a key challenge: how do you recommend the right music to right user? Out of a robust body of literature on recommendation systems, little work describes how users sequentially interact with recommended content. This gap is particularly evident in the music domain, where understanding when and why users skip tracks serves as crucial implicit feedback. The [Music Streaming Sessions Dataset](https://www.aicrowd.com/challenges/spotify-sequential-skip-prediction-challenge) was released by Spotify in 2018 to encourage research on this overlooked aspect of streaming. 

This project hopes to provide an elementary solution (within the bounds of knowledge learned in class) to Spotify's challenge: **Predict whether individual tracks encountered in a listening session will be skipped by a particular user.** 

This problem is a **classification problem**, where the prediction output is a binary variable indicating if the track was skipped or not skipped. The data set provides information about each user's listening session, including metadata and acoustic descriptors for all tracks encountered. This project uses the target variable `skipped`, a modified version of the original challenge's `skip_2` field, where `skip_2` is a boolean variable (`TRUE`/`FALSE`) and `skipped` is a character variable (`yes`/`no`).

## Data Overview

### Data Source

Given laptop constraints, this project uses the miniature version of the [Music Streaming Sessions Dataset](https://www.aicrowd.com/challenges/spotify-sequential-skip-prediction-challenge), which is a minimally sized version of the original training set and track features provided by Spotify for challenge users to familiarize themselves with the data set. 

### Data quality & complexity check

The complete data set contains 167,880 observations of 47 variables. Each observation corresponds to the playback of one track, for a total of 167,880 tracks listened to during 10,000 unique listening sessions, representing 50,704 unique tracks. For more information on the data used, please refer to the `README.me` in the `\data` folder.

### Potential data issues

When reading in the data, variables `context_type`, `hist_user_behavior_reason_start`,  `hist_user_behavior_reason_end`, `mode`, `time_signature`, and `key` were retyped as factors. Analysis of the target variable revealed no major issues and proportions of songs skipped or not skipped were approximately even. There was no missingness in any of the variables. 
 

## Methods

### Assessment metric

Models will be assessed using accuracy, and a confusion matrix will be produced.

### Analysis plan

An 80-20 training-test split was implemented using stratified sampling by target variable (2 strata). Resamples were constructed by taking the training dataset and applying repeated V-fold cross-validation (5 folds, 3 repeats) with stratification on the target variable with 2 strata.

The following model types were specified with a plan for tuning hyperparameters using a regular grid:

- logistic regression model (`glm` engine)
- Elastic net model (`glmnet` engine)
    - Mixture was explored over $[0,1]$ range with 21 levels
    - Penalty was explored over $[-3,0]$ range with 21 levels (on log-10 scale)
- K-nearest neighbors model (`kknn` engine)
    - Neighbors was explored over $[1,25]$ with 7 levels
- Random forest (`ranger` engine)
    - Number of trees was explored over $[500, 2000]$ with 4 levels
    - Number of randomly selected predictors to split on was explored over $[1,5]$ with 5 levels
    - Minimum number of data points in a node for splitting was explored over $[2,40]$ with 4 levels
- Boosted tree (`xgboost` engine)
    - Number of trees was explored over $[100, 2000]$ with 6 levels
    - Number of randomly selected predictors to split on was explored over $[1,5]$ with 5 levels
    - Minimum number of data points in a node for splitting was explored over $[2,40]$ with 4 levels
    - Learning rate was explored over $[-5,-0.2]$ with 10 levels (on log-10 scale)
    
The preprocessing/feature engineering for these models can be observed in the `2_recipes_ex2.R` script. Reviewing will help to fully understand the preprocessing steps used.

The logistic and elastic net models used the preprocessing stored in `titanic_recipe_lm`. We take care to remove unneeded variables (`passenger_id`, `name`, `cabin`, `embarked`, `ticket` and variables with zero variance), use linear model to impute missing values for `age`, dummy code predictor variables that are factors, add complexity by including some interactions, and standardize all numerical variables.

The k-nearest neighbors, random forest, and boosted tree models used the preprocessing stored in `titanic_recipe_tree`. We take care to remove unneeded variables (`passenger_id`, `name`, `cabin`, `embarked`, `ticket` and variables with zero variance), use linear model to impute missing values for `age`, one-hot encode predictor variables that are factors, and standardize all numerical variables.

Before any training of models occurs we decided the accuracy would be the metric by which we would compare models.

have an analysis plan: data splitting, resampling (cross-validation, bootstrap, etc), which model types, how many recipes etc. Note that students should have this mapped out in their GitHub repo. That is, there should be place holder R scripts created. You don't have to have everything coded, but the overall structure should be evident.   
have two model types defined and fitted to the resamples: null/baseline model and one other model type (likely standard linear or logistic model):
The recipe can be very basic since we just want to see if you can get things running
demonstrate their fits are successful by displaying a table that contains each model's assessment metric value.
summarize their progress, where they are at, and what their next steps will be. Identifying and potential issues or concerns would be a good idea too.

[Should cover the data splitting procedure and clearly identify what type of prediction problem it is. State and describe the model types you will be fitting. Describe any parameters that will be tuned. Describe what recipes will be used. Describe the resampling technique used. In some cases an extended discussion about recipe variations might be useful. Especially if students are using recipe variation to try and explore the predictive importance of certain variables. Explain the metric that will be used to compare and ultimately used to select a final model.]

## Model Building & Selection

[Should reiterate the metric that will be used to compare models and determine which will be the final/winning model. Include a table of the best performing model results. Review and analysis of tuning parameters should happen here. Should further tuning be explored? Or how should tuning be adjusted when fitting data like this in the future. This would be a good section to describe what the best parameters were for each model type. Could include a discussion comparing any systematic differences in performance between model types or recipes. If variations in recipes were used to explore predictive importance of certain variables, then it should be discussed here. The section will likely end with the selection of the final/winning model (provide your reasoning). Was it surprising or not surprising that this particular model won? Explain.]

## Final Model Analysis

[This is where you fit your final/winning model to the testing data. Assess the final model’s performance with at least the metric used to determine the winning model, but it is also advisable to use other performance metrics (especially ones that might be easier to communicate/understand). Should include an exploration of predictions vs the true values (graph) or a confusion matrix (table). Remember to consider the scale of your outcome variable at this time — did you transform the target variable? If a transformation was used, then you should consider conducting analyses on both the original and transformed scale of the target variable. Is the model any good? It might be the best of the models you tried, but does the effort of building a predictive model really pay off — is it that much better than a baseline/null model? Were there any features of the model you selected that make it the best (e.g. fits nonlinearity well)?]

## Conclusion

[State any conclusions or discoveries/insights. This is a great place for future work, new research questions, and next steps.]

## References
Spotify. (2018). *Spotify sequential Skip Prediction Challenge: Challenges*. AIcrowd. [https://www.aicrowd.com/challenges/spotify-sequential-skip-prediction-challenge](https://www.aicrowd.com/challenges/spotify-sequential-skip-prediction-challenge)

Brost, B., Mehrotra, R., & Jehan, T. (2019, May). The music streaming sessions dataset. In *The World Wide Web Conference* (pp. 2594-2600).

## Appendices

### EDA

### Miscellaneous Extras

